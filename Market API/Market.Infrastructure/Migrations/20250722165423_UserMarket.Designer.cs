// <auto-generated />
using System;
using Market.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Market.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250722165423_UserMarket")]
    partial class UserMarket
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21c96647-83d8-4ec2-a755-a9f486f81411"),
                            ConcurrencyStamp = "547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Site Administrator",
                            NormalizedName = "SITE ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("894f6287-bb05-455e-839e-b9674a9f367c"),
                            ConcurrencyStamp = "547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Company Owner",
                            NormalizedName = "COMPANY OWNER"
                        },
                        new
                        {
                            Id = new Guid("32dfcd38-4975-4127-b0bd-ec12a64cf27f"),
                            ConcurrencyStamp = "547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3d9445-b3bb-45af-923e-6c9a60897a4c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            Email = "su.admin@gmail.ba",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SU.ADMIN@GMAIL.BA",
                            NormalizedUserName = "SU.ADMIN@GMAIL.BA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVUQ30YB5tOClcClcXQ7w8G7NyIXwX7ZkjOzVxN4pjHu8/ixuLSExS7Oqd7f+fosg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "su.admin@gmail.ba"
                        },
                        new
                        {
                            Id = new Guid("bd355245-000f-48cf-bfdb-46d26d637320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            Email = "market1.admin@gmail.ba",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKET1.ADMIN@GMAIL.BA",
                            NormalizedUserName = "MARKET1.ADMIN@GMAIL.BA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVUQ30YB5tOClcClcXQ7w8G7NyIXwX7ZkjOzVxN4pjHu8/ixuLSExS7Oqd7f+fosg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "market1.admin@gmail.ba"
                        });
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0dfa8ba-5f6d-41fe-b06d-413bb8b16e06"),
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            RoleId = new Guid("21c96647-83d8-4ec2-a755-a9f486f81411"),
                            UserId = new Guid("1a3d9445-b3bb-45af-923e-6c9a60897a4c")
                        },
                        new
                        {
                            Id = new Guid("699d3d05-e038-49bf-8c54-0509372a6e6c"),
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            RoleId = new Guid("894f6287-bb05-455e-839e-b9674a9f367c"),
                            UserId = new Guid("bd355245-000f-48cf-bfdb-46d26d637320")
                        });
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Market.Core.Entities.Person", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoThumbnail")
                        .HasColumnType("text");

                    b.HasKey("ApplicationUserId");

                    b.HasIndex("MarketId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("1a3d9445-b3bb-45af-923e-6c9a60897a4c"),
                            Address = "Mostar 19",
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            FirstName = "Site",
                            Gender = "M",
                            IsDeleted = false,
                            LastName = "Administrator"
                        },
                        new
                        {
                            ApplicationUserId = new Guid("bd355245-000f-48cf-bfdb-46d26d637320"),
                            Address = "Mostar 19",
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            FirstName = "Azra",
                            Gender = "F",
                            IsDeleted = false,
                            LastName = "Smajic"
                        });
                });

            modelBuilder.Entity("Market.Core.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07c3ed5a-b793-47e2-a692-aad7a32fa0f6"),
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            MarketId = new Guid("c2f491f6-6789-4f28-b5aa-3fbbd9e3bfb4"),
                            Name = "Računar"
                        },
                        new
                        {
                            Id = new Guid("d72c9db6-8a88-4247-a22d-e24d2509e457"),
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            MarketId = new Guid("c2f491f6-6789-4f28-b5aa-3fbbd9e3bfb4"),
                            Name = "Telefon"
                        });
                });

            modelBuilder.Entity("Market.Entities.MarketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Markets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2f491f6-6789-4f28-b5aa-3fbbd9e3bfb4"),
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            Location = "Hercegovina",
                            Name = "Market 1"
                        },
                        new
                        {
                            Id = new Guid("dddd8eaf-6d12-4d53-8315-902f50c65ae1"),
                            CreatedAt = new DateTime(2025, 4, 13, 1, 22, 18, 866, DateTimeKind.Utc),
                            IsDeleted = false,
                            Location = "Bosna",
                            Name = "Market 2"
                        });
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Market.Core.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Market.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Market.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Market.Core.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Market.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Market.Core.Entities.Person", b =>
                {
                    b.HasOne("Market.Core.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithOne("Person")
                        .HasForeignKey("Market.Core.Entities.Person", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Market.Entities.MarketEntity", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Market.Core.Entities.ProductCategory", b =>
                {
                    b.HasOne("Market.Entities.MarketEntity", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Market.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
